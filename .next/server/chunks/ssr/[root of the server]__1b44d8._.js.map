{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/relucky/Desktop/programming/react/aitu-net-frontend/src/components/ChatPage.tsx"],"sourcesContent":["import {useAuth} from '@/context/AuthProvider';\nimport {Client, Message, Stomp} from '@stomp/stompjs';\nimport SockJS from 'sockjs-client'\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {api} from \"@/lib/api\";\nimport {User} from \"@/models/user\";\nimport {useSearchParams} from \"next/navigation\";\n\nexport default function ChatPage() {\n    const stompClientRef = useRef<Client | null>(null)\n    const {user} = useAuth()\n\n    const [chatRooms, setChatRooms] = useState<Map<string, ChatRoom>>(new Map())\n\n    // grouped chat messages by chatId [chatId: [messages]]\n    const [chatRoomMessages, setChatRoomMessages] = useState<Map<string, ChatMessage[]>>(new Map())\n    const [inputMessage, setInputMessage] = useState<string>('')\n\n    const searchParams = useSearchParams()\n\n    // Current chat id for user\n    const [currentChatId, setCurrentChatId] = useState<string>('')\n    const [currentCompanion, setCurrentCompanion] = useState<string>('')\n\n    useEffect(() => {\n        if (!user) {\n            return\n        }\n        const sockJS = new SockJS('http://localhost:8080/ws')\n        const stompClient = new Client({\n            webSocketFactory: () => sockJS,\n            debug: (msg) => {\n                console.log(msg)\n            },\n            onConnect: onConnected,\n            onStompError: (frame) => {\n                console.error('Broker reported error: ' + frame.headers['message'])\n                console.error('Additional details: ' + frame.body)\n            }\n        })\n        stompClient.activate()\n\n        stompClientRef.current = stompClient\n\n        return () => {\n            stompClient.deactivate()\n        }\n    }, [user])\n\n    const onConnected = () => {\n        console.log('Successfully connected to STOMP client.')\n        console.log('user', user)\n        stompClientRef.current?.subscribe(`/user/${user?.email}/queue/messages`, onPrivateMessageReceived)\n\n        const companionEmailFromParam = searchParams.get('companionEmail')\n        if (companionEmailFromParam) {\n            selectChat(`${user?.email}_${companionEmailFromParam}`, companionEmailFromParam)\n        }\n        fetchChatRooms()\n        fetchOnlineUsers()\n    }\n\n    const fetchChatRooms = async () => {\n        if (user) {\n            const rooms: ChatRoom[] = await api.fetchChatRooms(user.email)\n            setChatRooms(\n                new Map(rooms.map((chatRoom) => [chatRoom.chatId, chatRoom]))\n            )\n            console.log(chatRooms)\n        }\n    }\n\n    const fetchOnlineUsers = async () => {\n        if (user) {\n            const onlineUsers: User[] = await api.fetchOnlineUsers()\n            console.log('Online users', onlineUsers)\n        }\n    }\n\n    const onPrivateMessageReceived = (message: Message) => {\n        const chatMessage = JSON.parse(message.body) as ChatMessage;\n        selectChat(chatMessage.chatId, chatMessage.sender)\n    }\n\n    const selectChat = async (chatId: string, companionEmail: string) => {\n        if (!user) {\n            return\n        }\n\n        setCurrentChatId(chatId)\n        setCurrentCompanion(companionEmail)\n\n        const messages = await api.fetchChatRoomMessages(user.email, companionEmail)\n        const chatIdChatRoomMessages = Map.groupBy(messages.values(), item => item.chatId)\n        setChatRoomMessages(chatIdChatRoomMessages)\n    }\n\n    if (!user) {\n        return <div>Loading...</div>\n    }\n\n    const handleInputMessage = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setInputMessage(e.target.value)\n    }\n\n    const sendMessage = () => {\n        console.log(`sending message: ${inputMessage} to ${currentCompanion} from ${user.email}`)\n        const stompClient = stompClientRef.current;\n        if (!stompClient) {\n            return;\n        }\n        if (inputMessage === '') {\n            return\n        }\n        const message: ChatMessage = {\n            chatId: '',\n            type: 'MESSAGE',\n            content: inputMessage,\n            recipient: currentCompanion,\n            sender: user.email,\n            status: 'DELIVERED',\n            timestamp: new Date()\n        }\n        stompClient.publish({\n            destination: '/app/chat',\n            body: JSON.stringify(message)\n        })\n        setInputMessage('')\n\n        selectChat(currentChatId, currentCompanion)\n    }\n\n    function sendMessageOnEnter() {\n        return (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault()\n                sendMessage()\n            }\n        }\n    }\n\n    return (\n        <div className=\"h-screen bg-black text-gray-300 flex overflow-hidden\">\n            {/* Sidebar (Fixed height, scrollable list inside) */}\n            <aside className=\"w-1/4 bg-gray-900 p-4 h-screen shadow-lg flex flex-col overflow-hidden\">\n                <h3 className=\"text-lg font-semibold text-white mb-4\">Your Chats</h3>\n                <ul className=\"space-y-2 overflow-y-auto flex-1\">\n                    {[...chatRooms.values()].map((chatRoom) => (\n                        <li key={chatRoom.id}>\n                            <button\n                                className=\"w-full bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded transition text-left\"\n                                onClick={() => selectChat(chatRoom.chatId, chatRoom.recipient)}\n                            >\n                                {chatRoom.recipient}\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </aside>\n\n            {/* Main Chat Area */}\n            <main className=\"flex-1 p-6 flex flex-col h-screen overflow-hidden\">\n                <h1 className=\"text-2xl font-bold text-white\">{currentCompanion}</h1>\n\n                <div className=\"w-full bg-gray-900 p-4 rounded-lg shadow-lg mt-4 flex flex-col flex-1 overflow-hidden\">\n                    {/* Scrollable Messages Section */}\n                    <div className=\"flex-1 overflow-y-auto p-2 space-y-2\">\n                        {currentChatId ? (\n                            (chatRoomMessages.get(currentChatId) || []).map((message) => (\n                                <div\n                                    key={message.id}\n                                    className={`p-3 rounded max-w-[75%] ${\n                                        message.sender === user.email\n                                            ? \"bg-blue-600 text-white ml-auto\"\n                                            : \"bg-gray-800 text-gray-300\"\n                                    }`}\n                                >\n                                    {message.content}\n                                </div>\n                            ))\n                        ) : (\n                            <div className=\"text-gray-400 flex items-center justify-center h-full\">\n                                Select a chat to start messaging\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Sticky Message Input Bar */}\n                    {currentCompanion && (\n                        <div className=\"mt-4 flex p-2 bg-gray-800 rounded-b-lg\">\n                            <input\n                                type=\"text\"\n                                className=\"flex-grow p-2 rounded bg-gray-700 border border-gray-600 text-white\"\n                                placeholder={`Enter message for ${currentCompanion}`}\n                                onChange={handleInputMessage}\n                                value={inputMessage}\n                                onKeyDown={sendMessageOnEnter()}\n                            />\n                            <button\n                                className=\"ml-2 bg-blue-600 hover:bg-blue-500 px-4 py-2 text-white rounded transition\"\n                                onClick={sendMessage}\n                            >\n                                Send\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </main>\n        </div>\n    )\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/relucky/Desktop/programming/react/aitu-net-frontend/src/app/chat/page.tsx"],"sourcesContent":["'use client'\nimport ChatPage from '@/components/ChatPage';\n\nexport default function LoginPage() {\n    return <ChatPage />;\n}\n"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACpB,qBAAO,8OAAC,8HAAA,CAAA,UAAQ;;;;;AACpB"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}